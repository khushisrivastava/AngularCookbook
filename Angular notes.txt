                                                    ANGULAR

Start a project:- ng new Project name
                    cd into the project 
        run server:- ng serve

Installing a new package:-
    All the packages are installed locally into the project ang not globally on device
    Installed package is visible in package.json file.
    This package can be used to overwrite some defaults settings of angular app in agular.json file
        The required module of the package can be added from nome_modules folder

Working of Angular:
    We first start with the index.html file. This is the html file which is displayed in the browser.
    When this page is loaded, a file named main.ts is executed with it.
    In main.ts, there is a "bootstrapModule" which passes the imported "AppModule" as an argument.
    In 'app.module.ts' file, 'AppComponent' is passed in the 'bootstrap' array which tells angular to include all the 'app.component' files in the project.
    Angular now can read all the 'app.component' files.
    'app.component.ts' file contains a decorator '@Component' under which there is a variable named 'selector'.
    The specified 'selector acts as an html tag under which all the content in the 'app.component.html' file is included in the 'index.html' file.

Creating a Component:
    To create a component for a specific app, inside the app folder, create a folder with the name same as the component name.
    Create a file inside the folder named as 'componentName.component.ts'.
    Now, inside this file, first we need to import the 'Component' element so that js compiler should know what the '@Component' means.
    To include the 'Component', type the following in the ts file:
        import { Component } from '@angular/core';
    Then declare the '@Component' decorator and add its deatils as follows:
        @Component({
            selector: 'app-name',
            templateUrl: './name.component.html'        //For this, there must be a name.component.html file in the component folder which contains the content of the component.
        })
    Then we need to enter the following statement:
        export class NameComponent { }            
    
    Creating component with CLI:-
        ng generate component ComponentName           or               ng g c ComponentName
        This will create a new component in the app folder with all the required files.
        Also this component will automatically be added in app.module.ts file.
        use ng g c ComponentName --skipTest -> to supress test file

Use inline template:
    To use inline template in .ts file instead of templateUrl use template and write your html code in between quotes(' ').
    To write multi line code instead of ' use backtics(` `) to wrap your code.

    We can use same for style.
        The only difference with this is it takes input in form of an array.

Different ways of using selectors:
    By default, when we mention the selector's name in quotes in the component.ts file, we use the selector as an element in the template file.
    There are more ways to use a selector.
        Use selector as a class:
            Inside the quotes of the selector variable, use '.selectorName' to use the selector as a class same as in css.
        Use selector as an attribute:
            Wrap the name of the selector with square brackets ( [] ) to use the selector as an attribute of any html tag.

Databinding:
    Communication between Transcript file and template file.
    Can be done in multiple ways:
        Output data:
            String Interpolation
            Property Binding
        React to event:
            Event Binding
        Combination of both the above:
            Two-Way-Binding

String Interpolation:
    Define a variable in .ts file in export class.
    Call that variable in .html file using {{ VarName }}.
    This always returns string, if thw variable defined is not a string the it will be first comverted into string and then returned.

Propety Binding:
    syntax: [disabled] = "functionName"
    This method can be used to bind html attribute with some function in .ts file.
    This property comes in play when we want to change the value of some attribute during runtime.
    For eg- We used property binding to enable the button after 2 sec of reloading the page.

Event Binding:
    This property is used to execute a piece of code or a method when some event occurs. eg: click
    This property can be used by adding an event inside parenthesis and equating it with a method or a piece of code.
    eg. (click) = "methodName"

Two-Way-Binding:
    syntax: [(ngModel)] = "VarName"
    To use ngModel, FormsModule from @angular/forms needs to be added in imports array in AppModule.
    It will change the value of the html element with the two way data binding to the varName as well as it can change the value of varName to whatever user defines it in the html element.

Directives:
    Structural Directive:
        *ngIf - This returns either true or false.
            * is required because ngIf a structural directive which either adds or removes elements from the DOM.
        *ngIf with else -
            <p *ngIf="true/false; else localVarName"> Message </p>
                    <ng-template #localVarName>         // # is used for local referal
                        Message
                    </ng-template>
                    Here ng-template tag is used as a substitute element which will be present in the DOM if else condition is true.
        *ngFor = "let varName of listName"
    
    Attribute Derivative:
        They do not add or remove elements from the DOM, they just change the element they are placed upon.
        ngStyle - 
            The property is just ngStyle, we enclose it in [] to use property binding.
            [ngStyle] = "{propertyName: 'value'}"
            We can also pass in some method in value to dynamically change the style.
        ngClass -
            This property allow us to dynamically add or remove css class from an element.
            It is too used with enclosing in [].
            [ngClass] = "{className : 'condition'}"

// i = index ->  This is reserverd for indexing

Defining Models 
    Models are added in a file created in component's folder.
    componentName.model.ts
        export class ModelName{
            public name: string;                //public keyword is added to make it accessible publically
        }

Property Binding on Elements of Components
    import { Input } from '@angular/core' in components.ts file.
    To the component you want to be shared with the Parent component add @Input decorator.
    eg. @Input() propertyName = ""
    We can also add alias name to the property that we are sharing, so that other components can use the alias name of the property and not the property name.
        To do so we do @Input('aliasName') propertyName = ""

Catching an event from other components:
    To catch an event from other components and to fetch data along with it, Do the following:
        Create emitable event property (emitable object).
        Example:
            @Output() propName = new EventEmitter<{data: datatype}>();          // here EventEmitter is an object which emits the data inside the <{}> to other components where these EventEmitter objects are used as event binding
            To use EventEmitter and Output, both must be imported from '@angular/core'.     // @Output is a decorator which is used to send the data of the property from this component to another component
        To emit the property out of the component, use the following:
            this.propName.emit({data: dataValue});
        Now, to catch the emitted data, the EventEmitter objects can be used as the event listner via event binding with the selector for the component which has the EventEmitter objects.
        To do so, do the following:
            <selectorName (propName)="funcName($event)"></selectorName>
            Here, propName is the EventEmitter object emitted from the other component, funcName is the function which fetches the values emitted by those objects.
    Alias for the EventEmitter can be used in the same way as in @Input decorator, for the @Output decorator.

Encapsulation:
    Each component is assigned with a specific attribute due to which css applied to one component wont affect other components.
    But we can change this behavior by adding the following in @Component:
        encapsulation: ViewEncapsulation.None 

Local Reference:
    Holds reference to the whole html element.
    It is denoted with hastag ('#') sign.
    The local referencecan be used anywhere in the html file but not in typescript file.

Accessing Template using @ViewChild:
    Another method to fetch the value of any html element is by using a local reference and @ViewChild.
    @ViewChild is a decorator placed before a property in a typescript file to convert the property to the type ElementRef.
    To convert a property to type ElementRef, do the following:
        Place a local reference on a html element.
        In the typescript file, create a property as follows:
            @ViewChild('localRefVarName') propertyName: ElementRef;
        Here ViewChild and ElementRef needs to be imported from '@angular/core'.
    Now, to get ElementRef object's value, use the following:
        propertyName.nativeElement.value

Projecting content into Component using ng-content:
    By default if we place anything between the opening and closing tags of the component, it will be ignored by angular.
    But if we want to display the content at a specific position in template, we can simply add <ng-content></ng-content>.
    Now the data will be displayed at the place where ng-content tag is placed.

Component Lifecycle:
    There are several phases or so called activities in a component, from its initiation to any changes made in it.
    These phases are refered to as several so called functions which run on their own when a specific phase, for example: any changes made in a component, is reached.
    If a user want to perform certain activity at a perticular phase, he can include lines of code in those functions which are executed in those phases.
    There are several types of Functions which are executed on several phases.
    These functions can be stated inside the component class.
    The functions and their instant of execution are defined below:
        ngOnChanges(changes: SimpleChanges): called after a bound input property changes. This is the only Lifecycle function that recives an argument as mensioned with the functionName.
        ngOnInit(): called once the component is initialized. Is executed after the constructor.
        ngDoCheck(): called during every change detection run.
        ngAfterContentInit(): called after content has been projected into the view via ng-content.
        ngAfterContentChecked(): called every time the project content has been checked.
        ngAfterViewInit(): called after the component's view and child views have been initialized.
        ngAfterViewChecked(): called every time the view and child views have been checked.
        ngOnDestroy(): called when an element is removed from the DOM.
    These Lifecycle components need to be imported from '@angular/core'.
    If you want, you can specify in the defination of the class that which Lifecycle component is defined for the component. 
        For example:
            export class compNameComponent implements OnInit, OnChanges {}      //here OnInit and OnChanges is specified after the keyword 'implements'
    Notes on working of these functions:
        ngOnChanges executes before ngOnInit.
        If we console.log the SimpleChanges argument of ngOnChanges, we will see a SimpleChanges object which has the information regarding the past changes or the current version of change made to the component.

Getting access to ng-content using @ContentChild:
    We can access the html elements, between the selector tags of a component, from the typescript file using @ContentChild.
    It is used in the same way as @ViewChild, setting a local reference, passing the localReference as the argument of @ContentChild decorator and accessing the element in the form of ElementRef object.
    @ContentChild needs to be imported form '@angular/core'.

Creating and Using Attribute Directives:
    Create a new folder in app folder describing the directive eg- directive-name.
    In the folder create a file directive-name.directive.ts .
    In the file created:
        Import Directive from @angular/core.
        @Directive({
            selector: '[appDirectiveName]'               //Use [] so that the directives can be called as it is by its name.
        })
        export Class DirectiveNameDirective{
            constructor(private elementName: ElementRef){}
            ngOnInit(){
                this.elementName.nativeElement.style.propertyName = "value";
            }
        }
    To use the directive created:
        In app.module.ts import the directive and under declarations list add the directive name(The one used to describe export class).
        To the place in template file where you want to use the directive simply add the directive's selector to the html tag.

    /// You can also use terminal to generate directive : ng g d directive-name or ng generate directive directive-name.

Using Renderer with directives:
    Create the directive as usual.
    Import Renderer2 from @angular/core.
    In export vlass:
        constructor(private elementName: ElementRef, private rendererName: Renderer2){}
        ngOnInit(){
            this.rendererName.setStyle(this.elementName.nativeElement, 'property', 'value', 'flag(optional)')
        }

    This method is better because many times we dont have access to the dom so if we try to change the dom element directly it would give error. 

Interrative Diretives:
    We can use a directive when thw user interact with the elements for eg hover over an element.
    To do this:
        import HostListener from @angular/core.
        In export class:
            @HostListener('event(eg-mouseenter)') listnerName(eventData:Event){
               this.rendererName.setStyle(this.elementName.nativeElement, 'property', 'value', 'flag(optional)') 
            }

Using HostBinding instead of Renderer2:
    Import HostBinding from @angular/core.
    In export class:
        @HostBinding('style.propertyName') propertyName: type = 'initialValue';
        Now instead of using Renderer2 just use:
            this.propertyName = 'finalValue';

Creating and Using structural directive:
    Steps:
        Generate a directive either manually pr by using CLI command.
        In the directive.ts file, do the following:
            Inject the TemplateRef and ViewContainerRef argument in the constructor as follows:
                constructor(private templateRef: TemplateRef, private vcRef: ViewContainerRef) {}
                TemplateRef is used to access the Template inside the element on which this directive is used.
                ViewContainerRef is used to mark the location of the element on which this directive is used.
                Later these helps in the manupilation of the ViewContainer of the element in the DOM.
            Define a property inside the class which recieves the condition for the directive to take action.
            Define the property as per the following example:
                @Input() set directiveName(condition: boolean) {        //set here specifies that directiveName will be a method which will return the element of the DOM
                    if(!condition) {            // directive functionality
                        this.vcRef.createEmbeddedView(this.templateRef);        // this method is used to insert the template in the templateRef property into the vcRef which will then be shown in the DOM
                    }   else {
                        this.vcRef.clear();     // this method clears the ViewContainer from the DOM
                    }
                }
            Now as we use *ngIf, we can use our custom structural directive in the same way.
            The property used to fetch the condition as the input should have the same name as our directive.

ngSwitch:
    It is a builtin structural directive.
    It is used in the same way as the switch statement in c or c++ or in any other language.
    Its syntax can be explained using an example:
        <div [ngSwitch]="value">        // here value is assigned a value in the typescript file
            <p *ngSwitchCase="5">Value is 5</p>
            <p *ngSwitchCase="10">Value is 10</p>
            <p *ngSwitchCase="15">Value is 15</p>
            <p *ngSwitchDefault>Value is Default</p>
        </div>
        Here, ngSwitch is used using property binding and accepts a value.
        ngSwitch then matches the value with all the values stated in the ngSwitchCase.
        Whichever value matches, That element stays in the DOM, rest are removed.
        If no value matches, ngSwitchDefault stays in the DOM, rest are removed.